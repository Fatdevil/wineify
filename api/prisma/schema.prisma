generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum EventStatus {
  SCHEDULED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum EventRole {
  OWNER
  ADMIN
  MEMBER
}

enum SubCompStatus {
  SCHEDULED
  ACTIVE
  COMPLETED
  SETTLED
  CANCELLED
}

enum BetStatus {
  PENDING
  WON
  LOST
  CANCELLED
}

enum SettlementStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String
  role         Role      @default(USER)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  bets       Bet[]
  stats      Stats?
  achievements UserAchievement[]
  sessions   Session[]
  eventMemberships EventMembership[]
  eventInvites     EventInvite[]   @relation("InviteCreator")
  notifications    Notification[]
}

model Session {
  id          String   @id @default(cuid())
  userId      String
  refreshHash String
  userAgent   String?
  ip          String?
  createdAt   DateTime @default(now())
  revokedAt   DateTime?
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Event {
  id              String            @id @default(cuid())
  name            String
  description     String?
  status          EventStatus       @default(SCHEDULED)
  startsAt        DateTime?
  endsAt          DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  subCompetitions SubCompetition[]
  participants    Participant[]
  memberships     EventMembership[]
  invites         EventInvite[]
}

model SubCompetition {
  id             String        @id @default(cuid())
  name           String
  description    String?
  status         SubCompStatus @default(SCHEDULED)
  startsAt       DateTime?
  endsAt         DateTime?
  eventId        String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  event          Event         @relation(fields: [eventId], references: [id])
  participants   Participant[]
  bets           Bet[]
  results        Result[]

  @@index([eventId])
}

model Participant {
  id                String         @id @default(cuid())
  name              String
  alias             String?
  eventId           String
  subCompetitionId  String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  event             Event          @relation(fields: [eventId], references: [id])
  subCompetition    SubCompetition? @relation(fields: [subCompetitionId], references: [id])
  bets              Bet[]
  results           Result[]

  @@index([eventId])
  @@index([subCompetitionId])
}

model Bet {
  id               String         @id @default(cuid())
  userId           String
  subCompetitionId String
  participantId    String?
  resultId         String?
  amount           Decimal        @db.Decimal(10, 2)
  odds             Decimal        @db.Decimal(6, 2)
  status           BetStatus      @default(PENDING)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  user             User           @relation(fields: [userId], references: [id])
  subCompetition   SubCompetition @relation(fields: [subCompetitionId], references: [id])
  participant      Participant?   @relation(fields: [participantId], references: [id])
  result           Result?        @relation(fields: [resultId], references: [id])
  settlement       Settlement?

  @@index([userId])
  @@index([subCompetitionId])
  @@index([participantId])
}

model Result {
  id               String         @id @default(cuid())
  subCompetitionId String
  participantId    String
  outcome          String
  recordedAt       DateTime       @default(now())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  subCompetition   SubCompetition @relation(fields: [subCompetitionId], references: [id])
  participant      Participant    @relation(fields: [participantId], references: [id])
  bets             Bet[]
  settlements      Settlement[]

  @@index([subCompetitionId])
  @@unique([subCompetitionId, participantId])
}

model Settlement {
  id          String            @id @default(cuid())
  betId       String            @unique
  resultId    String?
  status      SettlementStatus  @default(PENDING)
  settledAt   DateTime?
  payout      Decimal?          @db.Decimal(10, 2)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  bet         Bet               @relation(fields: [betId], references: [id])
  result      Result?           @relation(fields: [resultId], references: [id])

  @@index([resultId])
}

model EventMembership {
  id        String    @id @default(cuid())
  eventId   String
  userId    String
  role      EventRole @default(MEMBER)
  createdAt DateTime  @default(now())
  event     Event     @relation(fields: [eventId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
  @@index([userId])
}

model EventInvite {
  id        String   @id @default(cuid())
  eventId   String
  codeHash  String
  createdBy String
  expiresAt DateTime?
  maxUses   Int?
  usedCount Int      @default(0)
  revokedAt DateTime?

  event   Event @relation(fields: [eventId], references: [id])
  creator User  @relation("InviteCreator", fields: [createdBy], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  payload   Json
  readAt    DateTime?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

model Stats {
  id          String   @id @default(cuid())
  userId      String   @unique
  totalWins   Int      @default(0)
  totalLosses Int      @default(0)
  totalUnits  Int      @default(0)
  streak      Int      @default(0)
  xp          Int      @default(0)
  level       Int      @default(1)
  nextLevelXp Int      @default(100)
  lastUpdated DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Achievement {
  id          String  @id @default(cuid())
  code        String  @unique
  title       String
  description String
  xpReward    Int

  users UserAchievement[]
}

model UserAchievement {
  id            String       @id @default(cuid())
  userId        String
  achievementId String
  achievedAt    DateTime     @default(now())

  user         User         @relation(fields: [userId], references: [id])
  achievement  Achievement  @relation(fields: [achievementId], references: [id])

  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
}
